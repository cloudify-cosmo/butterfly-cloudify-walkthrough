tosca_definitions_version: cloudify_dsl_1_2

description: >
  This blueprint uses the cloudify Ansible (SSH) plugin to install a
  Cloudify intro Tutorial application. It uses AWS as the infrastructre
  and Uses Ansible to update and deploy the application code

imports:
  - http://www.getcloudify.org/spec/cloudify/3.3/types.yaml
  - http://www.getcloudify.org/spec/aws-plugin/1.3/plugin.yaml
  - types/node.yaml

inputs:

  application_port:
    type: string
    default: 8088

  aws_access_key_id:
    type: string

  aws_secret_access_key:
    type: string

  ec2_region_name:
    type: string

  use_existing_security_group_for_application:
    type: boolean
    default: false

  application_security_group_id:
    type: string
    default: ''

  use_existing_keypair:
    type: boolean
    default: false

  keypair_name:
    type: string
    default: cfy_local_keypair

  ssh_key_filename:
    type: string
    default: ~/.ssh/cfy_local_keypair.pem

  application_host_user_agent:
    type: string
    default: ubuntu

  use_existing_server_for_application:
    type: boolean
    default: false

  application_server_id:
    type: string
    default: ''

  application_server_image_id:
    type: string

  application_server_instance_type:
    type: string

  use_existing_ip_for_application:
    type: boolean
    default: false

  application_server_ip:
    type: string
    default: ''

dsl_definitions:
  aws_config: &AWS_CONFIG
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    ec2_region_name: { get_input: ec2_region_name }

node_templates:

  application_server_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *AWS_CONFIG
      use_external_resource: { get_input: use_existing_ip_for_application }
      resource_id: { get_input: application_server_ip }

  application_host:
    type: cloudify.aws.nodes.Instance
    properties:
      aws_config: *AWS_CONFIG
      use_external_resource: { get_input: use_existing_server_for_application }
      resource_id: { get_input: application_server_id }
      install_agent: false
      image_id: { get_input: application_server_image_id }
      instance_type: { get_input: application_server_instance_type }
    relationships:
      - target: keypair
        type: cloudify.aws.relationships.instance_connected_to_keypair
      - target: application_server_ip
        type: cloudify.aws.relationships.instance_connected_to_elastic_ip
      - target: application_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group

  keypair:
    type: cloudify.aws.nodes.KeyPair
    properties:
      aws_config: *AWS_CONFIG
      use_external_resource: { get_input: use_existing_keypair }
      resource_id: { get_input: keypair_name }
      private_key_path: { get_input: ssh_key_filename }

  application_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *AWS_CONFIG
      use_external_resource: { get_input: use_existing_security_group_for_application }
      resource_id: { get_input: application_security_group_id }
      description: Security group for Nodejs-Application VMs
      rules:
        - ip_protocol: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: { get_input: application_port }
          to_port: { get_input: application_port }
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 32000
          to_port: 39000
          cidr_ip: 0.0.0.0/0

  tutorial_application:
    type: cloudify.nodes.NodeApplication
    relationships:
      - type: cloudify.relationships.contained_in
        target: application_host